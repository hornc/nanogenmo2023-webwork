// H. S. Keeler's 15 Elemental Plot Combinations
// https://site.xavier.edu/polt/keeler/OnWebwork.pdf pp. 49–57
// generated as either GDF (output=1) or text prompts (output=2)
// Specify plot case with case=n (n=1–15)

Goal ::=
    <. a = 1 .> <. b = 2 .>
    (
      <. output = 2 .> Prompt<case,a,b>
      | <. output = 1 .> Graph<case,a,b>
    )
;

Prompt<case,a,b> ::=
    <. c = 3 .> <. d = 4 .>
    ( <. case = 1 .>
      Character<c> " takes some action which compels " Character<a> " to go to a particular location." #10
      Character<d> " takes some action which compels " Character<b> " to be in the same location." #10
      "Describe " Character<c> "'s action. "
      "Describe " Character<d> "'s action. "
      "Describe " Character<a> " going to that location. "
      "Describe how " Character<a> " interacts with " Character<b> " at the location."
    | <. case = 2 .>
      Character<a> " and " Character<b> " have an interaction. Later, because of this interaction, " Character<a>  " does something to " Character<b> ". "
      "Describe the first interaction. Describe the second interaction."
    | <. case = 3 .>
      Character<a> " and " Character<b> " have an interaction. Later, because of this interaction, " Character<a>  " does something to " Character<b> ". "
      "Still later, a third event occurs between " Character<a> " and " Character<b> " as a result of this second event. "
      "Describe the first interaction. Describe the second interaction. Describe the third interaction"
    )
;

Character<a> ::=
      <. a = 1 .> "Alice"
    | <. a = 2 .> "Bob"
    | <. a = 3 .> "Clarise"
    | <. a = 4 .> "Dylan"
    | <. a = 5 .> "Ernest"
    | <. a = 6 .> "Fleur"
;

Node<a> ::=
      <. a = 1 .> "A"
    | <. a = 2 .> "B"
    | <. a = 3 .> "C"
    | <. a = 4 .> "D"
    | <. a = 5 .> "E"
    | <. a = 6 .> "F"
;

Event<a> ::=
      <. a = 1 .> "1"
    | <. a = 2 .> "2"
    | <. a = 3 .> "3"
    | <. a = 4 .> "4"
    | <. a = 5 .> "5"
    | <. a = 6 .> "6"
    // ...
    | <. a = 24 .> "24"
    | <. a = 25 .> "25"
    | <. a = 26 .> "26"
    | <. a = 27 .> "27"
    | <. a = 28 .> "28"
    | <. a = 29 .> "29"
    | <. a = 30 .> "30"
    | <. a = 31 .> "31"
;

Clist<n> ::=
    <. c = 1 .> {
      Node<c> ", " Character<c> ", 0" #10
      <. c += 1 .> }  <. c > n .>
;

NodeList<a, b, s> ::=
    <. n = s .>
    NodeDef
    ( <. n = 1 .> | <. n > 1 .> )
    <. b += n .>
    Clist<a>
    {
      "e" Event<n> ", e" Event<n> ", " Event<n> #10
      <. n += 1 .> }  <. n >= b .>
    EdgeDef
;

Graph<case,a,b> ::=
    <. h = 1 .>  // set the hero
    <. && e1 = 0, e2 = 0 .>  // default source nodes
    ( <. case = 1 .>
        <. && c = 4, e = 3 .> NodeList<c,e,d>
        #10
        "A, e1, 3.0" #10
        "C, e1, 1.0" #10
        "B, e2, 1.0" #10
        "D, e2, 1.0" #10
        "e1, e3, 3.0" #10
        "e2, e3, 1.0"
    | <. case = 2 .>
        <. && c = 2, e = 2 .> NodeList<c,e,d>
        #10
        "A, e1, 3.0" #10
        "B, e1, 1.0" #10
        "e1, e2, 3.0" #10
        "e1, e2, 1.0"
    | <. case = 3 .>
        <. && c = 2, e = 3 .> NodeList<c,e,d>
        #10
        "A, e1, 3.0" #10
        "B, e1, 1.0" #10
        "e1, e2, 3.0" #10
        "e1, e2, 1.0" #10
        "e2, e3, 1.0" #10
        "e2, e3, 3.0"
    | <. case = 4 .>
        #10
        <. && c = 3, e = 3 .> NodeList<c,e,d>
        "C, e1, 1.0" #10
        "B, e1, 1.0" #10
        "A, e2, 3.0" #10
        "e1, e2, 1.0" #10
        "e1, e3, 1.0"
    | <. case = 5 .>
        // 5 events
        <. && c = 6, e = 5 .> <. d = 24 .> NodeList<c,e,d>
        <. && e1 = 0, e2 = 0 .>
        <. && t1  = 2, t2  = 4 .> <. d = 24 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t1 -= 1, t2 -= 1 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t2 += 2, e1 += 24 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t2 -= 1, e1 += 1 .> <. t1 -= 1 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t2 -= 3, e1 += 2 .> <. e2 += 26 .> Knot2<t1, e1, t2, e2, d, h>
    | <. case = 6 .>
        // 6 characters, 5 events
        <. && c = 6, e = 5 .> <. d = 24 .> NodeList<c,e,d>
        <. i = 1 .> {
          (  <. i = 1 .><. && t1  = 6, t2  = 4 .>
            |<. i = 2 .><. && t1 += 5, t2 += 3 .>
            |<. i = 3 .><. && t1 += 4, t2 += 2 .><. e1 += 24 .>
            |<. i = 4 .><. && t1 += 3, t2 += 1 .><. e1 += 25 .>
            |<. i = 5 .><. && t1 += 2, t2 += 1 .><. && e1 += 26, e2 += 27 .>
          ) Knot2<t1, e1, t2, e2, d, h> <. i += 1 .>} <. i > 5 .>
    | <. case = 7 .>
        // 5 characters, 4 events
        <. && c = 5, e = 4 .> <. d = 25 .> NodeList<c,e,d>
        <. && t1  = 2, t2  = 3 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t1 += 4, t2 += 5 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t1 += 1, t2 += 4 .> <. e2 += 26 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t1 += 1, t2 += 2 .> <. && e1 += 27, e2 += 25 .> Knot2<t1, e1, t2, e2, d, h>
    | <. case = 8 .>  // New Threads Born, p. 53
        // 4 characters, 4 events
        <. c = 4 .> <. e = 4 .> <. d = 25 .> NodeList<c,e,d>
        <. t1  = 3 .> Knot1<t1, e1, d, h>
        <. t1 += 4 .> Knot1<t1, e1, d, h>
        <. && t1 += 4, e1 += 26 .> <. && t2 = 3, e2 += 25 .> Knot2<t1, e1, t2, e2, d, h>
        <. t1 += 1 .> <. && t2 += 2, e2 += 27 .> Knot2<t1, e1, t2, e2, d, h>
    | <. case = 9 .>
        // 6 characters, 4 events
        <. c = 6 .> <. e = 4 .> <. d = 25 .> NodeList<c,e,d>
        <. i = 1 .> {
          (  <. i = 1 .> <. && t1  = 3, t2  = 6 .>
            |<. i = 2 .> <. && t1 += 2, t2 += 5 .>
            |<. i = 3 .> <. && t1 += 1, t2 += 4 .>
          ) Knot2<t1, e1, t2, e2, d, h> <. i += 1 .>} <. i > 3 .>
          <. && t1 += 1, e1 += 27 .>
          <. && t2 += 2, e2 += 26 .>
          <. && t3  = 3, e3  = 25 .>
          Knot3<t1, e1, t2, e2, t3, e3, d, h>
    | <. case = 10 .>
        // 6 characters, 4 events
        <. c = 6 .> <. e = 4 .> <. d = 28 .> NodeList<c,e,d>
        <. && t1 = 1, t2 = 2 .> <. t3 = 3 .>
        Knot3<t1, e1, t2, e2, t3, e3, d, h>
        <. i = 1 .> {
          (  <. i = 1 .> <. && t1 += 1, t2 += 4 .>
            |<. i = 2 .> <. && t1 += 2, t2 += 5 .>
            |<. i = 3 .> <. && t1 += 3, t2 += 6 .>
          ) <. e1 += 28 .> Knot2<t1, e1, t2, e2, d, h> <. i += 1 .>} <. i > 3 .>
    | <. case = 11 .>
        // 4 characters, 3 events
        <. c = 4 .> <. e = 3 .> NodeList<c,e,d>
    | <. case = 12 .>
        // 4 characters, 4 events
        <. c = 4 .> <. e = 4 .> NodeList<c,e,d>
    | <. case = 13 .>  // Row of bricks
        // 6 characters, 5 events
        <. c = 6 .> <. e = 5 .> NodeList<c,e,d>
    | <. case = 14 .>  // XIII (b)
        // 6 characters, 5 events
        <. c = 6 .> <. e = 5 .> NodeList<c,e,d>
    | <. case = 15 .>  // Scheherazade tale, p. 56
        // pseudo-web
        // recursive ? web within a web?
    )
;


// Thread weights
WHero ::= "3.0";
WOther ::= "1.0";


Knot1<t1, e1, d, h> ::=
   Edge<t1, e1, d, h>
   <. d += 1 .>
   <. && t1 -= t1, e1 -= e1 .>
;


Knot2<t1, e1, t2, e2, d, h> ::=
   Edge<t1, e1, d, h>
   Edge<t2, e2, d, h>
   <. d += 1 .>  // auto-increment the destination for the next knot
   // zero variables for next knot
   <. && t1 -= t1, t2 -= t2 .>
   <. && e1 -= e1, e2 -= e2 .>
;


Knot3<t1, e1, t2, e2, t3, e3, d, h> ::=
   Edge<t1, e1, d, h>
   Edge<t2, e2, d, h>
   Edge<t3, e3, d, h>
   <. d += 1 .>  // auto-increment the destination for the next knot
   // zero variables for next knot
   <. && t1 -= t1, e1 -= e1 .>
   <. && t2 -= t2, e2 -= e2 .>
   <. && t3 -= t3, e3 -= e3 .>
;


Edge<t, e, d, h> ::=
   #10
   ( <. e = 0 .> Node<t> | <. e > 0 .> "e" Event<e> )
   ", e" Event<d> ", "
   ( <. t = h .> WHero | <. t < h .> WOther | <. t > h .> WOther )
;


NodeDef ::= "nodedef>name VARCHAR,label VARCHAR,time INT" #10;
EdgeDef ::= "edgedef>node1 VARCHAR,node2 VARCHAR,weight DOUBLE";
