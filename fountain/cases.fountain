// H. S. Keeler's 15 Elemental Plot Combinations
// https://site.xavier.edu/polt/keeler/OnWebwork.pdf pp. 49–57
// generated as either GDF (output=1) or text prompts (output=2)
// Specify plot case with case=n (n=1–15)

Goal ::=
    <. a = 1 .> <. b = 2 .>
    (
      <. output = 2 .> Prompt<case,a,b>
      | <. output = 1 .> Graph<case,a,b>
    )
;

Prompt<case,a,b> ::=
    <. c = 3 .> <. d = 4 .>
    ( <. case = 1 .>
      Character<c> " takes some action which compels " Character<a> " to go to a particular location." #10
      Character<d> " takes some action which compels " Character<b> " to be in the same location." #10
      "Describe " Character<c> "'s action. "
      "Describe " Character<d> "'s action. "
      "Describe " Character<a> " going to that location. "
      "Describe how " Character<a> " interacts with " Character<b> " at the location."
    | <. case = 2 .>
      Character<a> " and " Character<b> " have an interaction. Later, because of this interaction, " Character<a>  " does something to " Character<b> ". "
      "Describe the first interaction. Describe the second interaction."
    | <. case = 3 .>
      Character<a> " and " Character<b> " have an interaction. Later, because of this interaction, " Character<a>  " does something to " Character<b> ". "
      "Still later, a third event occurs between " Character<a> " and " Character<b> " as a result of this second event. "
      "Describe the first interaction. Describe the second interaction. Describe the third interaction"
    )
;

Character<a> ::=
      <. a = 1 .> "Alice"
    | <. a = 2 .> "Bob"
    | <. a = 3 .> "Clarise"
    | <. a = 4 .> "Dylan"
    | <. a = 5 .> "Ernest"
    | <. a = 6 .> "Fleur"
;

Node<a> ::=
      <. a = 1 .> "A"
    | <. a = 2 .> "B"
    | <. a = 3 .> "C"
    | <. a = 4 .> "D"
    | <. a = 5 .> "E"
    | <. a = 6 .> "F"
;

Event<a> ::=
      <. a = 1 .> "1"
    | <. a = 2 .> "2"
    | <. a = 3 .> "3"
    | <. a = 4 .> "4"
    | <. a = 5 .> "5"
    | <. a = 6 .> "6"
    // ...
    | <. a = 24 .> "24"
    | <. a = 25 .> "25"
    | <. a = 26 .> "26"
    | <. a = 27 .> "27"
    | <. a = 28 .> "28"
;

Clist<n> ::=
    <. c = 1 .> {
      Node<c> ", " Character<c> ", 0" #10
      <. c += 1 .> }  <. c > n .>
;

NodeList<a, b, s> ::=
    NodeDef
    ( <. s = 1 .> | <. s > 1 .> )
    <. b += s .>
    Clist<a>
    {
      "e" Event<s> ", e" Event<s> ", " Event<s> #10
      <. s += 1 .> }  <. s >= b .>
    EdgeDef
;

Graph<case,a,b> ::=
    <. h = 1 .>  // set the hero
    ( <. case = 1 .>
       <. c = 4 .> <. e = 3 .> NodeList<c,e,s>
       "A, e1, 3.0" #10
       "C, e1, 1.0" #10
       "B, e2, 1.0" #10
       "D, e2, 1.0" #10
       "e1, e3, 3.0" #10
       "e2, e3, 1.0"
    | <. case = 2 .>
        <. c = 2 .> <. e = 2 .> NodeList<c,e,s>
        "A, e1, 3.0" #10
        "B, e1, 1.0" #10
        "e1, e2, 3.0" #10
        "e1, e2, 1.0"
    | <. case = 3 .>
        <. c = 2 .> <. e = 3 .> NodeList<c,e,s>
        "A, e1, 3.0" #10
        "B, e1, 1.0" #10
        "e1, e2, 3.0" #10
        "e1, e2, 1.0" #10
        "e2, e3, 1.0" #10
        "e2, e3, 3.0" #10
    | <. case = 4 .>
        <. c = 3 .> <. e = 3 .> NodeList<c,e,s>
        "C, e1, 1.0" #10
        "B, e1, 1.0" #10
        "A, e2, 3.0" #10
        "e1, e2, 1.0" #10
        "e1, e3, 1.0"
    | <. case = 5 .>
        <. s = 24 .>
        <. && c = 6, e = 5 .> NodeList<c,e,s>
        // 5 events
        <. && t1  = 1, t2  = 3 .> <. && e1 = 0, e2 = 0 .> <. d = 25 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t1 += 1, t2 += 1 .> <. d -= 1 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t2 += 2, e1 += 24 .> <. d += 2 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t2 -= 1, e1 += 1 .> <. && d += 1, t1 -= 1 .> Knot2<t1, e1, t2, e2, d, h>
        <. && t2 -= 3, e1 += 2 .> <. && d += 1, e2 += 26 .> Knot2<t1, e1, t2, e2, d, h>
    | <. case = 6 .>
        <. c = 6 .> <. e = 5 .> NodeList<c,e,s>
        // 6 characters
        // 5 events
    | <. case = 7 .>
        <. c = 5 .> <. e = 4 .> NodeList<c,e,s>
        // 5 characters
        // 4 events
    | <. case = 8 .>
        <. c = 4 .> <. e = 4 .> NodeList<c,e,s>
        // 4 characters
        // 4 events
        // New Threads Born, p. 53
    | <. case = 9 .>
        <. c = 6 .> <. e = 4 .> NodeList<c,e,s>
        // 6 characters
        // 4 events
    | <. case = 10 .>
        <. c = 6 .> <. e = 4 .> NodeList<c,e,s>
        // 6 characters
        // 4 events
    | <. case = 11 .>
        <. c = 4 .> <. e = 3 .> NodeList<c,e,s>
        // 4 characters
        // 3 events
    | <. case = 12 .>
        <. c = 4 .> <. e = 4 .> NodeList<c,es>
        // 4 characters
        // 4 events
    | <. case = 13 .>
        <. c = 6 .> <. e = 5 .> NodeList<c,e,s>
        // 6 characters
        // 5 events
        // Row of bricks
    | <. case = 14 .>
        <. c = 6 .> <. e = 5 .> NodeList<c,e,s>
        // 6 characters
        // 5 events
        // XIII (b)
    | <. case = 15 .>
        // Scheherazade tale, p. 56
        // pseudo-web
        // recursive ? web within a web?
    )
;

// Thread weights
WHero ::= "3.0";
WOther ::= "1.0";


Knot2<t1, e1, t2, e2, d, h> ::=
   Edge<t1, e1, d, h>
   Edge<t2, e2, d, h>
;


Edge<t, e, d, h> ::=
   ( <. e = 0 .> Node<t> | <. e > 0 .> "e" Event<e> )
   ", e" Event<d> ", "
   ( <. t = h .> WHero | <. t < h .> WOther | <. t > h .> WOther )
   #10
;


NodeDef ::= "nodedef>name VARCHAR,label VARCHAR,time INT" #10;
EdgeDef ::= "edgedef>node1 VARCHAR,node2 VARCHAR,weight DOUBLE" #10;

